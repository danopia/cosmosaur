name: CI

on:
  # events to dryrun:
  pull_request: {}
  # events to publish:
  push:
    branches: [ main ]

env:
  # Skip deno's tendency to grab deps from package.json
  DENO_NO_PACKAGE_JSON: '1'

jobs:

  check:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    name: Check w/ ${{ matrix.deno-version }}
    strategy:
      matrix:
        deno-version:
        - v2.3
        - canary
      fail-fast: false # run each branch to completion

    steps:
    - uses: actions/checkout@v4

    - run: corepack enable
    - uses: actions/setup-node@v4
      with:
        cache: yarn

    - name: Use Deno ${{ matrix.deno-version }}
      uses: denoland/setup-deno@v2
      with:
        cache: true
        deno-version: ${{ matrix.deno-version }}

    - run: yarn install --immutable

    - name: Check NPM publication
      run: time npm publish --dry-run
    - name: Check Yarn publication
      run: time yarn pack --dry-run

    - name: Check JSR publication
      run: time deno publish --dry-run --allow-dirty

  publish-jsr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    name: Publish to JSR
    needs: check
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - uses: denoland/setup-deno@v2
      with:
        cache: true

    - name: Publish now
      run: deno publish

  publish-npm:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    name: Publish to NPM
    needs: check
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - run: corepack enable
    - uses: actions/setup-node@v4
      with:
        cache: yarn

    - run: yarn install --immutable

    - name: Publish now
      run: yarn npm publish --tolerate-republish
      env:
        YARN_NPM_AUTH_TOKEN: ${{ secrets.YARN_NPM_AUTH_TOKEN }}
